{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"파이썬 리스트 구조","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNLw9nFoCM0FVE0GRxUOL4i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### 파이썬 리스트의 특징 \n","- 크기가 가변적, 여러 종류의 인스턴스가 원소로 들어갈 수 있음  \n","\n","<br/>\n","\n","### 파이썬 list의 구조\n","\n","> * PyObject: 파이썬의 모든 객체는 PyObject를 구현(즉, 모든 파이썬 객체는 PyObject를 가지고 있음)\n",">\n","> * PyVarObject: PyObject를 확장한 구조체, 길이를 가진 객체에 사용 - size 정보를 가지고 있음    \n","> \n","> * PyObject_Var_Head: 인스턴스마다 길이가 변하는 객체를 선언할 때 사용, PyVarObject 확장\n","> \n","> * PyListObject: PyObject_Var_Head, 이중 포인터, allocated(리스트에 할당된 크기)를 가지는 파이썬의 list 구조체\n",">     * 이중 포인터\n",">\n",">    원소들의 주소가 담긴 포인터 배열에 대한 포인터로, 다른 언어와는 다르게 포인터 배열을 갖기 때문에 크기가 다른 여러 인스턴스를 원소로 가질 수 있음(다른 언어는 배열 변수 자체가 배열의 시작 포인터)    \n","\n","\n","<br/>\n","\n","### 데이터의 크기에 따른 파이썬 리스트의 효율성\n","* 파이썬의 배열은 다른 언어에 비해 편의성을 목적으로 더욱 많은 구조체들로 이루어져 있음\n","\n","* 이는 데이터의 개수가 많아질수록 다른 언어에 비해 관리해야 할 구조체가 많아지므로 메모리의 측면에서 효율적이지 못할 수 있음\n","\n","* 이중 포인터를 사용하므로 원소 주소에 대해 탐색 횟수가 다른 언어에 비해 증가하게 되며, 별도의 메모리가 필요하게 될 것\n","\n","<br/>\n","\n","####참조\n","* https://seoyeonhwng.medium.com/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0-f04847b58286\n","\n","* https://github.com/zpoint/CPython-Internals/blob/master/BasicObject/list/list.md#related-file"],"metadata":{"id":"qxdVU0qf8dqX"}},{"cell_type":"markdown","source":["### random 함수의 seed\n","\n","* Mersenne Twister 알고리즘을 이용\n","    * python을 제외하고도 많은 프로그램에서 난수 발생에 사용되는 알고리즘\n","    1. seed를 첫 번째 항으로 점화식을 통해 624개의 모수 생성\n","    2. 이 모수를 이용하여 복잡한 계산을 통해 난수를 리턴\n","    3. 모수 집단(624)개를 다 사용하면 다시 새로운 모수 집단 생성\n","\n","\n","### seed의 의미\n","* 모수 집단을 생성할 때 사용되는 첫 번째 값. \n","* 그러므로 같은 seed에서는 같은 모수가 나오게 된다.\n","\n","\n","####참조\n","* https://frhyme.github.io/python-libs/np_random_get_set_state/"],"metadata":{"id":"D9WmTmh8FxQ-"}}]}